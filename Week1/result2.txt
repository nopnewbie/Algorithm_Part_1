See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
Checkstyle:   FAILED (10 warnings)

Correctness:  12/26 tests passed
Memory:       2/8 tests passed
Timing:       1/9 tests passed

Aggregate score: 42.41%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.2K Feb 25 15:37 Percolation.java
2.7K Feb 25 15:37 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'fullFlag' is never read. Consider removing it from the class.  At Percolation.java:[line 13]
Warnings generated: 1

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Percolation.java:9:23: The instance variable 'MAX_SIZE' must start with a lowercase letter and use camelCase. [MemberName]
Percolation.java:29:26: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Percolation.java:36:31: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Percolation.java:43:26: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Percolation.java:61:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
Percolation.java:109: Line is longer than 128 characters (currently 131). [LineLength]
Percolation.java:126: Line is longer than 128 characters (currently 145). [LineLength]
PercolationStats.java:13:22: The instance variable 'X' must start with a lowercase letter and use camelCase. [MemberName]
PercolationStats.java:26:12: 'for' is not followed by whitespace. [WhitespaceAfter]
PercolationStats.java:49:3: The comment is empty. [IllegalTokenText]
Checkstyle ends with 10 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 15 total tests.

Tests 1 through 8 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), we check the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Except as noted, a site is opened at most once.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
    - percolates() returns wrong value [after 5 sites opened]
    - student   = true
    - reference = false
    - failed after call 5 to isOpen()
  * filename = input8.txt
  * filename = input8-no.txt
  * filename = input10-no.txt
    - percolates() returns wrong value [after 55 sites opened]
    - student   = true
    - reference = false
    - failed after call 55 to isOpen()
  * filename = greeting57.txt
    - percolates() returns wrong value [after 56 sites opened]
    - student   = true
    - reference = false
    - failed after call 56 to isOpen()
  * filename = heart25.txt
==> FAILED

Test 2: open random sites until just before system percolates
  * n = 3
  * n = 5
  * n = 10
    - percolates() returns wrong value [after 39 sites opened]
    - student   = true
    - reference = false
    - failed after call 39 to isOpen()
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> FAILED

Test 3: open predetermined sites for n = 1 and n = 2
  * filename = input1.txt
  * filename = input1-no.txt
  * filename = input2.txt
    - percolates() returns wrong value [after 1 site opened]
    - student   = true
    - reference = false
    - failed after call 1 to isOpen()
  * filename = input2-no.txt
    - percolates() returns wrong value [after 1 site opened]
    - student   = true
    - reference = false
    - failed after call 1 to isOpen()
==> FAILED

Test 4: check for backwash with predetermined sites
  * filename = input20.txt
  * filename = input10.txt
  * filename = input50.txt
  * filename = jerry47.txt
==> passed

Test 5: check for backwash with predetermined sites that have
        multiple percolating paths
  * filename = input3.txt
    - percolates() returns wrong value [after 2 sites opened]
    - student   = true
    - reference = false
    - failed after call 2 to isOpen()
  * filename = input4.txt
  * filename = input7.txt
    - percolates() returns wrong value [after 11 sites opened]
    - student   = true
    - reference = false
    - failed after call 11 to isOpen()
==> FAILED

Test 6: open predetermined sites with long percolating path
  * filename = snake13.txt
  * filename = snake101.txt
==> passed

Test 7: open every site
  * filename = input5.txt
==> passed

Test 8: open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 9: check that IndexOutOfBoundsException is thrown if (col, row) is out of bounds
  * n = 10, (col, row) = (0, 6)
  * n = 10, (col, row) = (12, 6)
  * n = 10, (col, row) = (11, 6)
  * n = 10, (col, row) = (6, 0)
  * n = 10, (col, row) = (6, 12)
  * n = 10, (col, row) = (6, 11)
==> passed

Test 10: check that IllegalArgumentException is thrown if n <= 0 in constructor
  * n = -10
  * n = -1
  * n = 0
    - java.lang.IllegalArgumentException not thrown

==> FAILED

Test 11: create multiple Percolation objects at the same time
         (to make sure you didn't store data in static variables)
==> passed

Test 12: open predetermined list of sites using file inputs,
         but change the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==> passed

Test 13: call all methods in random order until just before system percolates
  * n = 3
    - percolates() returns wrong value [after 3 sites opened]
    - student   = true
    - reference = false
    - failed on trial 6 of 40

  * n = 5
    - percolates() returns wrong value [after 12 sites opened]
    - student   = true
    - reference = false
    - failed on trial 3 of 20

  * n = 7
    - percolates() returns wrong value [after 20 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 10

  * n = 10
    - percolates() returns wrong value [after 52 sites opened]
    - student   = true
    - reference = false
    - failed on trial 2 of 5

  * n = 20
  * n = 50
==> passed

Test 14: call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
    - percolates() returns wrong value [after 3 sites opened]
    - student   = true
    - reference = false
    - failed on trial 2 of 40
  * n = 5
    - percolates() returns wrong value [after 13 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 20
  * n = 7
    - percolates() returns wrong value [after 29 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 10
  * n = 10
    - percolates() returns wrong value [after 55 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 5
  * n = 20
    - percolates() returns wrong value [after 225 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 2
  * n = 50
    - percolates() returns wrong value [after 1452 sites opened]
    - student   = true
    - reference = false
    - failed on trial 1 of 1
==> FAILED

Test 15: call all methods in random order until all sites are open,
         allowing open() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - percolates() returns wrong value [after 3 sites opened]
    - student   = true
    - reference = false
    - failed on trial 3 of 40
  * n = 5
    - percolates() returns wrong value [after 14 sites opened]
    - student   = true
    - reference = false
    - failed on trial 3 of 20
  * n = 7
    - percolates() returns wrong value [after 29 sites opened]
    - student   = true
    - reference = false
    - failed on trial 8 of 10
  * n = 10
  * n = 20
    - percolates() returns wrong value [after 244 sites opened]
    - student   = true
    - reference = false
    - failed on trial 2 of 2
  * n = 50
==> FAILED


Total: 8/15 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 11 total tests.

Test 1: Test that PercolationStats creates trials Percolation objects, each of size n-by-n
  * n =  20, trials =  10
    - PercolationStats created 11 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 21 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 51 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 151 Percolation objects instead of 150
==> FAILED

Test 2: Test that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
    - PercolationStats created 11 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 21 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 51 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 151 Percolation objects instead of 150
==> FAILED

Test 3: Test that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
    - PercolationStats created 11 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 21 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 51 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 151 Percolation objects instead of 150
==> FAILED

Test 4: Test that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    - PercolationStats created 11 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 21 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 51 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 151 Percolation objects instead of 150
==> FAILED

Test 5: Test that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    - PercolationStats created 11 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 21 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 51 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 151 Percolation objects instead of 150
==> FAILED

Test 6: Test that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
    - PercolationStats created 11 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 21 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 51 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 151 Percolation objects instead of 150
==> FAILED

Test 7: Check whether exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
  * n = -42, trials =   0
  * n =  42, trials =  -1
==> passed

Test 8: Create two PercolationStats objects at the same time and check mean()
        (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
    - PercolationStats created 11 Percolation objects instead of 10
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
    - PercolationStats created 6 Percolation objects instead of 5
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
    - PercolationStats created 11 Percolation objects instead of 10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
    - PercolationStats created 11 Percolation objects instead of 10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
    - PercolationStats created 11 Percolation objects instead of 10
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
    - PercolationStats created 101 Percolation objects instead of 100
==> FAILED

Test 9: Check that the methods return the same value, regardless of
        the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: Check for any calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 11: Check distribution of number of sites opened until percolation
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed


Total: 4/11 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Computing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Memory usage as a function of trials for n = 100
            (max allowed: 8*trials + 128 bytes)

            trials        bytes
--------------------------------------------
=> FAILED       16       180784 (706.2x)
=> FAILED       32       180912 (471.1x)
=> FAILED       64       181168 (283.1x)
=> FAILED      128       181680 (157.7x)
==> 0/4 tests passed


If you failed this test, it may be because you are holding an unnecessary
referene to a (large) Percolation object in an instance variable. Would
storing it in a local variable suffice?


Estimated student memory = 8.00 T + 180656.00   (R^2 = 1.000)

Total: 0/4 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        41264         
=> passed      256       655664         
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Total: 2/4 tests passed!

================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 9 total tests.

Test 1a-1e: Create an n-by-n percolation system; open sites at random until
            the system percolates. Count calls to connected(), union() and
            find() in WeightedQuickUnionUF.
                                                 2 * connected()
                 n   seconds       union()              + find()        constructor
---------------------------------------------------------------------------------------------
=> passed        8     0.00           58                   690                   1         
=> FAILED       32     0.00          741                 26710   (1.3x)          1         
=> FAILED      128     0.02        11221               1375162   (4.6x)          1         
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> 1/5 tests passed

Running time in seconds depends on the machine on which the script runs,
and  varies each time that you submit. If one of the values in the table
violates the performance limits, the factor by which you failed the test
appears in parentheses. For example, (9.6x) in the union() column
indicates that it uses 9.6x too many calls.


Tests 2a-2d: Check whether number of calls to union(), connected(), and find()
             is a constant per call to open(), isFull(), and percolates().
             The table shows the maximum number of union(), connected(), and
             find() calls made during a single call to open(), isFull(), and
             percolates().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=> FAILED       32        4               0               1              38   (1.6x)
=> FAILED      128        4               0               1             151   (6.3x)
=> FAILED      512        4               0               1             609  (25.4x)
=> FAILED     1024        4               0               1            1195  (49.8x)
==> 0/4 tests passed

Total: 1/9 tests passed!

================================================================